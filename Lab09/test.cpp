//
//  test.cpp
//  Lab09
//
//  Created by Kaustubh on 11/1/24.
//  Test functions generated by OpenAI GPT-4o
//

#include <stdio.h>
#include <gtest/gtest.h>
#include "myString.hpp"

MyString str1 = MyString("Hello");
MyString str2 = MyString("World");
MyString str3 = MyString("Hello");

// Test for default constructor
TEST_F(MyStringTest, DefaultConstructor) {
    MyString emptyString;
    EXPECT_EQ(emptyString.length(), 0);
}

// Test for string constructor
TEST_F(MyStringTest, StringConstructor) {
    EXPECT_EQ(str1.length(), 5);
    EXPECT_EQ(str1.toString(), "Hello");
}

// Test for toString method
TEST_F(MyStringTest, ToString) {
    EXPECT_EQ(str1.toString(), "Hello");
    EXPECT_EQ(str2.toString(), "World");
}

// Test for length method
TEST_F(MyStringTest, Length) {
    EXPECT_EQ(str1.length(), 5);
    EXPECT_EQ(str2.length(), 5);
}

// Test for substr method (single parameter)
TEST_F(MyStringTest, SubstrSingleParam) {
    EXPECT_EQ(str1.substr(1), "ello");
    EXPECT_EQ(str2.substr(2), "rld");
}

// Test for substr method (two parameters)
TEST_F(MyStringTest, SubstrTwoParams) {
    EXPECT_EQ(str1.substr(1, 3), "ell");
    EXPECT_EQ(str2.substr(0, 2), "Wo");
}

// Test for operator+
TEST_F(MyStringTest, OperatorPlus) {
    MyString result = str1 + str2; // This will need to be adjusted in your MyString class
    EXPECT_EQ(result.toString(), "HelloWorld");
}

// Test for operator<<
TEST_F(MyStringTest, OperatorOutput) {
    std::ostringstream os;
    os << str1;
    EXPECT_EQ(os.str(), "Hello");
}

// Test for operator==
TEST_F(MyStringTest, OperatorEqual) {
    EXPECT_TRUE(str1 == str3);
    EXPECT_FALSE(str1 == str2);
}

// Test for operator!=
TEST_F(MyStringTest, OperatorNotEqual) {
    EXPECT_TRUE(str1 != str2);
    EXPECT_FALSE(str1 != str3);
}

// Test for operator<
TEST_F(MyStringTest, OperatorLessThan) {
    EXPECT_TRUE(str1 < str2);
    EXPECT_FALSE(str2 < str1);
}

// Test for operator>
TEST_F(MyStringTest, OperatorGreaterThan) {
    EXPECT_TRUE(str2 > str1);
    EXPECT_FALSE(str1 > str2);
}

// Test for operator<=
TEST_F(MyStringTest, OperatorLessThanOrEqual) {
    EXPECT_TRUE(str1 <= str3);
    EXPECT_TRUE(str1 <= str2);
    EXPECT_FALSE(str2 <= str1);
}

// Test for operator>=
TEST_F(MyStringTest, OperatorGreaterThanOrEqual) {
    EXPECT_TRUE(str1 >= str3);
    EXPECT_TRUE(str2 >= str1);
    EXPECT_FALSE(str1 >= str2);
}
